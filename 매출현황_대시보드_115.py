# -*- coding: utf-8 -*-
"""매출현황 대시보드_115.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WOyqtD5EptoH4Uf5ZT52v-BrdJN4_tzY
"""

!pip install streamlit
!pip install streamlit_colab
!pip install streamlit-plotly-events
!pip install openpyxl
!pip install pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# 
# import streamlit as st
# import pandas as pd
# import plotly.express as px
# import io
# import numpy as np
# 
# 
# # 페이지 설정
# st.set_page_config(
#     page_title="매출 분석 대시보드",
#     layout="wide"  # 와이드 모드로 설정
#     )
# 
# # 제목
# st.title("📊 매출 분석 대시보드")
# st.info("분석을 시작하려면 왼쪽 사이드바에 **'매출 리스트'**와 **'마스터 파일'**을 모두 업로드해 주세요.")
# 
# # session_state 초기화
# if 'current_df' not in st.session_state:
#     st.session_state.current_df = pd.DataFrame()
# 
# # 1. 사이드바 구성
# with st.sidebar:
#     st.header("파일 업로드 및 기간 선택")
# 
#     # 두 개의 엑셀 파일 업로드 위젯
#     sales_file = st.file_uploader("1. 매출 리스트 파일 업로드", type=["xlsx"])
#     master_file = st.file_uploader("2. 마스터 파일 업로드 (매출처, 품목 시트 포함)", type=["xlsx"])
# 
#     # 두 파일이 모두 업로드되었을 경우 데이터 병합
#     if sales_file and master_file:
#         try:
#             # 파일에서 데이터 읽기
#             sales_df = pd.read_excel(sales_file)
# 
#             # 마스터 파일에서 '매출처'와 '품목' 시트 로드
#             vendor_master = pd.read_excel(master_file, sheet_name='매출처')
#             item_master = pd.read_excel(master_file, sheet_name='품목')
# 
#             # '매출일' 컬럼이 있는지 확인하고, 있으면 날짜 형식으로 변환
#             if '매출일' in sales_df.columns:
#                 sales_df['매출일'] = pd.to_datetime(sales_df['매출일'])
# 
#                 # '매출처' 시트를 기준으로 병합하여 거래처구분 컬럼 추가
#                 merged_df = pd.merge(sales_df, vendor_master, on='매출처', how='left')
# 
#                 # '품목' 시트를 기준으로 병합하여 품목구분 컬럼 추가
#                 merged_df = pd.merge(merged_df, item_master, on='품목', how='left')
# 
#                 # 데이터 마지막 행 삭제 (의미 없는 합계 행 등을 제거하기 위함)
#                 merged_df = merged_df.iloc[:-1]
# 
#                 # 불필요한 컬럼 리스트 정의 (기존과 추가 요청된 컬럼 모두 포함)
#                 unnecessary_cols = [
#                     '제품군','송장번호','헤더비고','규격','부가세포함단가','영업담당자','영업담당자명','WBS명','거래처소분류','부가세포함금액','수주헤더비고','수주라인비고','B/L번호','L/C번호','수출신고번호',
#                     '매출유형','매출상태','영업문서범주코드','판매단위','영업조직','사업부','수주순번','납품일정순번','출고순번','비용센터','채권 전표 상태','세무분류','부가세사업장',
#                     '납품처','납품처명','공장','비고','수금처','수금처명','결제조건','수금예정일','고객자재코드','고객자재코드명', 'SET모품목', 'WBS번호','수주번호','출고일','손익전표번호','납품지시번호',
#                     '품목범주','출고번호','매출순번', 'No','매출번호',
#                     '캔수량', '캔 별 금액', '캔 별 장부금액', '품목제품군',
#                     '세무구분', '대분류', '중분류', '소분류', '유통경로', '수불유형', '품목계정', '수주유형', '고객그룹', '해외거래처구분',
#                     '매출처명_x', '매출처명_y', '품목명_x', '품목명_y'
#                 ]
# 
#                 # 불필요한 컬럼을 한 번에 삭제 (오류 방지를 위해 `errors='ignore'` 옵션 사용)
#                 merged_df = merged_df.drop(columns=unnecessary_cols, errors='ignore')
#                 st.success("두 파일이 성공적으로 병합되었으며, 불필요한 컬럼을 삭제했습니다!")
# 
#                 st.session_state.current_df = merged_df
#             else:
#                 st.warning("업로드된 매출 리스트 파일에 '매출일' 컬럼이 없습니다. 다시 확인해 주세요.")
#         except Exception as e:
#             st.error(f"파일을 처리하는 중 오류가 발생했습니다: {e}. 올바른 엑셀 파일인지, 그리고 '마스터 파일'에 '매출처'와 '품목' 시트가 포함되어 있는지 확인해 주세요.")
#             st.session_state.current_df = pd.DataFrame()
# 
#     # 최종 데이터프레임 다운로드 버튼 추가
#     if not st.session_state.current_df.empty:
#         # Excel 파일을 위한 BytesIO 버퍼 생성
#         output = io.BytesIO()
#         st.session_state.current_df.to_excel(output, index=False, engine='openpyxl')
#         output.seek(0)
# 
#         st.download_button(
#             label="최종 데이터 다운로드 (xlsx)",
#             data=output,
#             file_name="매출_분석_데이터.xlsx",
#             mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
#         )
# 
#     # 'df' 변수가 항상 정의되도록 수정
#     if 'current_df' in st.session_state and not st.session_state.current_df.empty:
#         df = st.session_state.current_df
#     else:
#         df = pd.DataFrame()
# 
# 
# # 2. 데이터프레임이 있을 때만 대시보드 내용 표시
# if not df.empty:
#     # '매출일' 컬럼에서 고유한 연월만 추출
#     unique_dates = sorted(df['매출일'].dt.to_period('M').unique())
#     date_options = [str(d) for d in unique_dates]
# 
#     # 사이드바에 기간 선택 위젯 추가
#     with st.sidebar:
#         selected_base_month = st.selectbox("기준 연월 선택", options=date_options)
#         selected_compare_month = st.selectbox("비교 연월 선택", options=date_options)
# 
#     # 메인 화면 컬럼 구성
#     col1, col2, col3 = st.columns([1, 2, 2]) # 1:2:2 비율로 3개 컬럼 생성
# 
#     # 2-1. 칼럼1: 주요 지표
#     with col1:
#         st.header("주요 지표")
# 
#         # 기준연월과 비교연월 데이터 필터링
#         base_month_sales = df[df['매출일'].dt.to_period('M') == selected_base_month]['장부금액'].sum()
#         compare_month_sales = df[df['매출일'].dt.to_period('M') == selected_compare_month]['장부금액'].sum()
# 
#         # 백만원 단위로 변환
#         base_sales_million = base_month_sales / 1_000_000
#         compare_sales_million = compare_month_sales / 1_000_000
#         delta_sales_million = base_sales_million - compare_sales_million
# 
#         # delta_color를 조건에 따라 설정
#         delta_sales_color = "normal" if delta_sales_million >= 0 else "inverse"
# 
#         st.markdown("#### 총 매출액")
#         st.metric(
#             label=f"{selected_base_month} 총매출액",
#             value=f"{base_sales_million:,.0f} 백만원",
#             delta=f"{delta_sales_million:,.0f} 백만원",
#             delta_color=delta_sales_color
#         )
# 
#         # 증감율 계산
#         if compare_month_sales != 0:
#             growth_rate = (base_month_sales - compare_month_sales) / compare_month_sales * 100
#             st.markdown(f"**비교 연월 대비 증감율**: {growth_rate:.2f}%")
#         else:
#             st.markdown(f"**비교 연월 대비 증감율**: -")
# 
# 
#         # 달러 매출액 (환위험 관리용)
#         st.markdown("---")
#         st.markdown("#### 달러 매출액")
# 
#         # '기준 연월'과 '비교 연월'에 해당하는 '판매금액' 필터링 및 합계 계산 (거래통화가 'USD'인 경우만)
#         base_month_usd_sales = df[(df['매출일'].dt.to_period('M') == selected_base_month) & (df['거래통화'] == 'USD')]['판매금액'].sum()
#         compare_month_usd_sales = df[(df['매출일'].dt.to_period('M') == selected_compare_month) & (df['거래통화'] == 'USD')]['판매금액'].sum()
# 
#         # 백만 달러 단위로 변환
#         base_usd_sales_million = base_month_usd_sales / 1_000_000
#         compare_usd_sales_million = compare_month_usd_sales / 1_000_000
#         delta_usd_sales_million = base_usd_sales_million - compare_usd_sales_million
# 
#         # delta_color를 조건에 따라 설정
#         delta_usd_color = "normal" if delta_usd_sales_million >= 0 else "inverse"
# 
#         st.metric(
#             label=f"{selected_base_month} 달러 매출액",
#             value=f"${base_usd_sales_million:,.2f} M",
#             delta=f"${delta_usd_sales_million:,.2f} M",
#             delta_color=delta_usd_color
#         )
# 
#         # 증감율 계산
#         if compare_month_usd_sales != 0:
#             usd_growth_rate = (base_month_usd_sales - compare_month_usd_sales) / compare_month_usd_sales * 100
#             st.markdown(f"**비교 연월 대비 증감율**: {usd_growth_rate:.2f}%")
#         else:
#             st.markdown(f"**비교 연월 대비 증감율**: -")
# 
# 
#     # 2-2. 칼럼2: 월별 매출액 추이 및 국가별 매출액 현황
#     with col2:
#         st.header("월별 매출액 추이")
#         # 월별 매출액 합계 계산
#         monthly_sales = df.groupby(df['매출일'].dt.to_period('M'))['장부금액'].sum().reset_index()
#         monthly_sales['매출일'] = monthly_sales['매출일'].astype(str)
# 
#         # 세로 막대 차트 생성
#         fig = px.bar(
#             monthly_sales,
#             x='매출일',
#             y='장부금액',
#             title="월별 매출액 변화 추이(전체 기간)",
#             color_discrete_sequence=['red'] # 막대 색상 빨간색
#         )
#         st.plotly_chart(fig, use_container_width=True)
# 
# 
# 
#         # ---
#         # 품목별 월별 매출액 추이 꺾은선 그래프 추가
#         st.markdown("#### 주요 품목 월별 매출액 추이")
# 
#         # 분석 대상 품목 리스트
#         target_items = ['PCpZr', 'CpHf', 'CpZr', 'HCDS']
# 
#         # 'Subject(PPT_보고용)' 컬럼의 값이 대상 품목에 포함되는 데이터만 필터링
#         filtered_df = df[df['Subject(PPT_보고용)'].isin(target_items)].copy()
# 
#         # 월별 품목별 매출액 합계 계산
#         item_monthly_sales = filtered_df.groupby(
#             [filtered_df['매출일'].dt.to_period('M'), 'Subject(PPT_보고용)']
#         )['장부금액'].sum().reset_index()
# 
#         # '매출일' 컬럼을 문자열로 변환하여 시각화에 용이하게 만듦
#         item_monthly_sales['매출일'] = item_monthly_sales['매출일'].astype(str)
# 
#         # 꺾은선 그래프 생성
#         fig_items_trend = px.line(
#             item_monthly_sales,
#             x='매출일',
#             y='장부금액',
#             color='Subject(PPT_보고용)', # 품목별로 다른 선을 그리기 위해 color 사용
#             title="주요 품목 월별 매출액 변화 추이(전체 기간)"
#         )
# 
#         # 차트 표시
#         st.plotly_chart(fig_items_trend, use_container_width=True)
# 
# 
#         # ---
#         # 국가별 매출액 버블 지도 차트 추가
#         st.markdown("#### 국가별 매출액 (지도)")
# 
#         # 국가명과 ISO 코드 매핑 딕셔너리 (필요에 따라 추가/수정 가능)
#         country_iso_map = {
#             '대한민국': 'KOR',
#             '미국': 'USA',
#             '중국': 'CHN',
#             '일본': 'JPN',
#             '호주': 'AUS',
#             '태국': 'THA',
#             '말레이시아': 'MYS',
#             '인도네시아': 'IDN',
#             '인도': 'IND',
#             '필리핀': 'PHL',
#             '베트남': 'VNM',
#             '캐나다': 'CAN',
#             '멕시코': 'MEX',
#             '브라질': 'BRA',
#             '영국': 'GBR',
#             '독일': 'DEU',
#             '프랑스': 'FRA',
#             '이탈리아': 'ITA',
#             '스페인': 'ESP',
#             '러시아': 'RUS',
#             '싱가포르': 'SGP',
#             '대만': 'TWN',
#             '벨기에': 'BEL',
#             '핀란드': 'FIN'
#         }
# 
#         # 국가별 매출액 합계 계산 (전체 기간 데이터 사용)
#         country_sales = df.groupby('국가구분')['장부금액'].sum().reset_index()
# 
#         # ISO 코드 컬럼 추가 (매핑 딕셔너리 사용)
#         country_sales['iso_alpha'] = country_sales['국가구분'].map(country_iso_map)
# 
#         # ISO 코드가 없는 데이터는 제외
#         country_sales.dropna(subset=['iso_alpha'], inplace=True)
# 
#         # 로그 변환 (더 큰 차이 조절 가능)
#         country_sales['size_scaled'] = np.log1p(country_sales['장부금액'])
# 
#         # 버블 지도 차트 생성
#         fig_map = px.scatter_geo(
#             country_sales,
#             locations="iso_alpha",
#             size="size_scaled", # 버블 크기를 조정(로그 변환 컬럼 사용)
#             color="장부금액",  # 여기에 색상을 줄 데이터 컬럼을 지정
#             color_continuous_scale=px.colors.sequential.Plasma, # 색상 팔레트 지정
#             hover_name="국가구분",
#             projection="natural earth",
#             title=f"국가별 매출액 지도(전체 기간)",
#             template="plotly", # 'plotly_dark'를 'plotly'로 변경하여 밝은 배경으로 개선
#             # color_discrete_sequence=["red"], # 버블의 색상을 빨간색으로 지정
#             size_max=60   # 최대 버블 크기 키우기
#         )
# 
#         # 지도 해상도 설정 추가
#         fig_map.update_layout({
#             'geo': {
#                 'resolution': 50
#             }
#         })
# 
# 
#         # 차트 표시
#         st.plotly_chart(fig_map, use_container_width=True)
# 
# 
#     # 2-3. 칼럼3: 거래처/품목별 매출 Top5
#     with col3:
#         st.header("Top 5 항목")
# 
#         # 기준 연월과 비교 연월 데이터 필터링
#         base_df = df[df['매출일'].dt.to_period('M') == selected_base_month].copy()
#         base_df['기간'] = selected_base_month
#         compare_df = df[df['매출일'].dt.to_period('M') == selected_compare_month].copy()
#         compare_df['기간'] = selected_compare_month
# 
#         combined_df = pd.concat([base_df, compare_df])
# 
#         # 데이터가 없을 경우 안내 메시지 표시
#         if combined_df.empty:
#             st.warning("선택한 기간에 해당하는 데이터가 없습니다. 다른 기간을 선택해 주세요.")
#         else:
#             # 색상 맵 정의
#             color_map = {
#                 selected_base_month: '#004488',
#                 selected_compare_month: '#C8C8C8'
#             }
# 
#             # 전체 데이터에서 Top 5 항목 선정 (기준 연월 기준으로 정렬)
#             top_5_vendors_base = base_df.groupby('거래처구분(PPT_보고용)')['장부금액'].sum().nlargest(5).index
#             top_5_items_base = base_df.groupby('Subject(PPT_보고용)')['장부금액'].sum().nlargest(5).index
# 
#             # 거래처별 매출액 상위 Top5 (두 기간 비교)
#             st.markdown("##### 거래처별 매출액 상위 5 (두 기간 비교)")
#             vendor_sales_chart = combined_df[combined_df['거래처구분(PPT_보고용)'].isin(top_5_vendors_base)]
#             vendor_sales_chart = vendor_sales_chart.groupby(
#                 ['기간', '거래처구분(PPT_보고용)']
#             )['장부금액'].sum().reset_index()
# 
#             # 기준 연월 기준으로 정렬
#             vendor_order = vendor_sales_chart[vendor_sales_chart['기간'] == selected_base_month].sort_values(by='장부금액', ascending=False)['거래처구분(PPT_보고용)']
# 
#             fig_vendor = px.bar(
#                 vendor_sales_chart,
#                 x='장부금액',
#                 y='거래처구분(PPT_보고용)',
#                 color='기간',
#                 barmode='group',
#                 orientation='h',
#                 category_orders={"거래처구분(PPT_보고용)": list(vendor_order)},
#                 color_discrete_map=color_map, # 색상 맵 적용
#                 title="거래처별 매출 Top 5"
#             )
#             st.plotly_chart(fig_vendor, use_container_width=True)
# 
#             # 품목별 매출액 상위 Top5 (두 기간 비교)
#             st.markdown("##### 품목별 매출액 상위 5 (두 기간 비교)")
#             item_sales_chart = combined_df[combined_df['Subject(PPT_보고용)'].isin(top_5_items_base)]
#             item_sales_chart = item_sales_chart.groupby(
#                 ['기간', 'Subject(PPT_보고용)']
#             )['장부금액'].sum().reset_index()
# 
#             # 기준 연월 기준으로 정렬
#             item_order = item_sales_chart[item_sales_chart['기간'] == selected_base_month].sort_values(by='장부금액', ascending=False)['Subject(PPT_보고용)']
# 
#             fig_item = px.bar(
#                 item_sales_chart,
#                 x='장부금액',
#                 y='Subject(PPT_보고용)',
#                 color='기간',
#                 barmode='group',
#                 orientation='h',
#                 category_orders={"Subject(PPT_보고용)": list(item_order)},
#                 color_discrete_map=color_map, # 색상 맵 적용
#                 title="품목별 매출 Top 5"
#             )
#             st.plotly_chart(fig_item, use_container_width=True)
# 
#             # ---
#             # 국가별 매출액 파이 차트 추가
#             st.markdown("#### 국가별 매출액 비중")
# 
#             # 기준 연월 데이터만 필터링
#             base_df_country_sales = df[df['매출일'].dt.to_period('M') == selected_base_month].copy()
# 
#             # '국가구분' 컬럼으로 그룹화하여 매출액 합계 계산
#             country_sales = base_df_country_sales.groupby('국가구분')['장부금액'].sum().reset_index()
# 
#             # 매출액 기준으로 내림차순 정렬
#             country_sales = country_sales.sort_values(by='장부금액', ascending=False)
# 
#             # 파이 차트 생성 (도넛 차트로 만들기 위해 hole 파라미터 사용)
#             fig_country = px.pie(
#                 country_sales,
#                 values='장부금액',
#                 names='국가구분',
#                 title=f'{selected_base_month} 국가별 매출액 비중',
#                 hole=0.5  # 도넛 모양을 위한 hole 설정
#             )
# 
#             # 차트 표시
#             st.plotly_chart(fig_country, use_container_width=True)

import os
from pyngrok import ngrok

# 여기에 발급받은 실제 토큰을 붙여넣으세요.
ngrok_token = "31tQ7vgtLDWYnSCoFpbcEWyYynT_6k9LBhyMBVwBwPojUzpct"
os.environ["NGROK_AUTH_TOKEN"] = ngrok_token
ngrok.set_auth_token(ngrok_token)

public_url = ngrok.connect(8501)
print("Streamlit 앱 주소:", public_url)

!streamlit run app.py &>/dev/null&